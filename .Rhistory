library('rattle')
library('rattle')
library('fpc')
data(wine, package="rattle")
K_means = function(X, k){
# group function compute for each data should belong to which cluster
# compute the distance between data with each means
group = function(mu, X, n){
r = rep(0,n)
for(i in 1:n){r[i] = which.min(rowSums(sweep(mu, 2, X[i,], "-") ^ 2))}
return(r)
}
# j functions compute given means and assigned cluster, the objection function
# clusting error
J = function(X, mu, n, r){
s = 0
for(i in 1:n){s = s + sum((X[i,] - mu[r[i],])^2)}
return(s)
}
# mu_adj function compute each cluster means
mu_adj = function(r, X ,k){
mu = matrix(0, k, dim(X)[2])
for(i in 1:k){
mu[i,] = ((r == i) * 1) %*% X / sum(r == i)
}
return(mu)
}
# Main function
# Compute the first two steps
n = dim(X)[1]; mu_start = X[1:k,]
r_start=group(mu_start,X,n)
Iter=0
j_dm=J(X,mu_start,n,r_start)
mu=mu_adj(r_start,X,k)
Iter=1
j_dm = c(j_dm,J(X,mu,n,r_start))
r=group(mu,X,n)
Iter = 2
# Use the while loops to do the K-means, and stop when J keeps the same
while(abs(j_dm[Iter]-j_dm[Iter-1])!=0){
mu=mu_adj(r,X,k)
Iter=Iter+1
j_dm=c(j_dm,J(X,mu,n,r))
r=group(mu,X,n)
Iter=Iter+1
j_dm=c(j_dm,J(X,mu,n,r))
}
return(r)
}
data(iris)
data.train = data.matrix(iris[1:4]); k = 3; true_cat = iris[5]
true_cat = as.numeric(factor(true_cat$Species, levels = sort(unique(true_cat$Species))))
r3 = K_means(data.train,k)
plotcluster(data.train,r3)
r3 = K_means(data.train,k)
plotcluster(data.train,r3)
Accuracy = sum(r3 == true_cat)/length(r3)
r3 = K_means(data.train,k)
plotcluster(data.train,r3)
Accuracy = sum(r3 == true_cat)/length(r3)
print(paste("the accuracy of non-scale data is ", Accuracy))
